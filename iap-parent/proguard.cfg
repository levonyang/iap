-target 1.8
-keeppackagenames
# ----------------------------------
#  通过指定数量的优化能执行
#  -optimizationpasses n
# ----------------------------------
-optimizationpasses 5
# ----------------------------------
#   混淆时不会产生形形色色的类名
#   -dontusemixedcaseclassnames
# ----------------------------------
-dontusemixedcaseclassnames
# ----------------------------------
#      指定不去忽略非公共的库类
#  -dontskipnonpubliclibraryclasses
# ----------------------------------
#-dontskipnonpubliclibraryclasses

# ----------------------------------
#       不预校验
#    -dontpreverify
# ----------------------------------
# -dontpreverify

# ----------------------------------
#      输出生成信息
#       -verbose
# ----------------------------------
-verbose

#混淆时应用侵入式重载
#这个选项可能会使参数和返回类型不同的方法和属性混淆后获得同样的名字
#-overloadaggressively

#优化时允许访问并修改有修饰符的类和类的成员
-allowaccessmodification
#确定统一的混淆类的成员名称来增加混淆
-useuniqueclassmembernames

-ignorewarnings
-dontshrink
-dontoptimize
-dontskipnonpubliclibraryclasses
-dontskipnonpubliclibraryclassmembers

# --------- 保护枚举中的所有方法名 ------------
-keep enum ** {*;}
-keep class *
-keep class **.package-info
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod

#这里添加你不需要混淆的类

# ---------保护所有实体中的字段名称----------
-keepclassmembers class * {
    <fields>;
}

# --------- 保护类中的所有get\set方法名 ------------
-keepclassmembers class * {
	void set*(***);
    *** get*();
}

# 解析标明不参与混淆的注解
-keep @com.haizhi.iap.common.annotation.ProguardIgnore class * {*;}
-keepclassmembers class * {
    @com.haizhi.iap.common.annotation.ProguardIgnore *;
}
